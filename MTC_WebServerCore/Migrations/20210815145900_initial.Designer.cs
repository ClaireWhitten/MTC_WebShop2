// <auto-generated />
using System;
using MTCrepository.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MTC_WebServerCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210815145900_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MTCmodel.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumberAdditional")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MTCmodel.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemovable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "f14fc6ed-cd62-43d1-8ee4-db957c025a39",
                            IsRemovable = false,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "c6aaef1a-8312-4185-8b51-1e3a09421ff7",
                            ConcurrencyStamp = "048edf52-4e2a-4a37-8f31-26697024020e",
                            IsRemovable = false,
                            Name = "UserAdmin",
                            NormalizedName = "USERADMIN"
                        },
                        new
                        {
                            Id = "6ee9e763-1f51-4d0d-a463-b7a8a791234b",
                            ConcurrencyStamp = "efadaac0-57f1-413f-9117-f8541793f70c",
                            IsRemovable = false,
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "7e19e371-55db-4c16-b9c0-4103de5b39fd",
                            ConcurrencyStamp = "f401e76d-3f4d-43b4-879f-53135c5a1575",
                            IsRemovable = false,
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "1dde702e-2587-41bd-bec5-0f4cc5d05498",
                            ConcurrencyStamp = "27e900a5-2120-40f7-bf10-90865caa386a",
                            IsRemovable = false,
                            Name = "Transporter",
                            NormalizedName = "TRANSPORTER"
                        },
                        new
                        {
                            Id = "277f86fd-db6a-449a-a7de-25917a177a61",
                            ConcurrencyStamp = "2d89a893-9750-43cf-938a-0ac7337f52f2",
                            IsRemovable = false,
                            Name = "Supplier",
                            NormalizedName = "SUPPLIER"
                        });
                });

            modelBuilder.Entity("MTCmodel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemovable")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransporterId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SupplierId")
                        .IsUnique()
                        .HasFilter("[SupplierId] IS NOT NULL");

                    b.HasIndex("TransporterId")
                        .IsUnique()
                        .HasFilter("[TransporterId] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9b55ba5-634b-456b-8e40-bd41e400638d",
                            Email = "super@user.com",
                            EmailConfirmed = true,
                            IsRemovable = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER@USER.COM",
                            NormalizedUserName = "SUPER@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF6bRgsmGRl0PDxvKseOI6DYCpQo3u2ANhO/PQW9np68DBx+Y3Uq30nN8CUFbAARzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dfd6198-549c-49ee-a67f-132b078655ea",
                            TwoFactorEnabled = false,
                            UserName = "super@user.com"
                        },
                        new
                        {
                            Id = "e08d7ef7-2615-4385-844f-81834bb6e776",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36462e34-ab6b-435a-ad60-503e38e9ad94",
                            Email = "client@mtc.com",
                            EmailConfirmed = true,
                            IsRemovable = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@MTC.COM",
                            NormalizedUserName = "CLIENT@MTC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEERA3gJMRgqiefLhB1OR0sgkRoJ/xi1lvovvLDuT+4F4P71yUwG6I51Ums+y+mYgMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd5587ba-a840-4783-9975-32d7ec923054",
                            TwoFactorEnabled = false,
                            UserName = "client@mtc.com"
                        },
                        new
                        {
                            Id = "a0392e57-a71c-4314-b87c-ba8dc7628fcc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bd7373f-bdfe-4922-b2fc-ed9d231e8cb5",
                            Email = "transporter@mtc.com",
                            EmailConfirmed = true,
                            IsRemovable = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANSPORTER@MTC.COM",
                            NormalizedUserName = "TRANSPORTER@MTC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENAo62lP457TFzbwnTanFa3DTsuhQ/+tQn7VI6CCp+aWJ0bKdqXTgUT74jHsRraqfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb092123-3f05-4be3-9076-a8d02f2216cb",
                            TwoFactorEnabled = false,
                            UserName = "transporter@mtc.com"
                        },
                        new
                        {
                            Id = "f0cd17fb-639c-4bd4-aa51-cb64259d9743",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9b03f0a-bb31-454b-adba-201ac682b751",
                            Email = "supplier@mtc.com",
                            EmailConfirmed = true,
                            IsRemovable = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPPLIER@MTC.COM",
                            NormalizedUserName = "SUPPLIER@MTC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKSnSPmFX00oKKwe3dJ+b3MSR2jrr0nlr1S5VUZBubgFV9mOeqFynec6UYH0ain4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1674fdc-df36-4cd7-858f-09dd9a0e7fbd",
                            TwoFactorEnabled = false,
                            UserName = "supplier@mtc.com"
                        },
                        new
                        {
                            Id = "3ba08e02-85b4-4488-8108-e526aa987eed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d1ef630-6044-4eb9-98fc-67a2ae1b8a25",
                            Email = "moderator@mtc.com",
                            EmailConfirmed = true,
                            IsRemovable = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@MTC.COM",
                            NormalizedUserName = "MODERATOR@MTC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELlz+u3kFS8de+uj1qEGW/9hzLpjORtr0QrW/aJbcGqVtvzRtHLGJPaqbJYPiRVMpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a42ab2d-7d96-4f8b-9dcd-092e4e7c98bf",
                            TwoFactorEnabled = false,
                            UserName = "moderator@mtc.com"
                        },
                        new
                        {
                            Id = "c6bbcf91-ab26-4bf1-a8ac-6251444d1464",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1218ca8-1a24-43e4-8046-0db4ca45e520",
                            Email = "UserAdmin@mtc.com",
                            EmailConfirmed = true,
                            IsRemovable = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERADMIN@MTC.COM",
                            NormalizedUserName = "USERADMIN@MTC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI0Zi6EsdzKZFR3ILH4fyrrMzAFx/NMvurQ+Rh5ws5Riex7sn6hY3WwOXeRxK4HLaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea63c235-5505-4dce-a589-fde4082bd830",
                            TwoFactorEnabled = false,
                            UserName = "UserAdmin@mtc.com"
                        });
                });

            modelBuilder.Entity("MTCmodel.Bonus", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<int>("OrderOUTId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.HasIndex("ClientID");

                    b.HasIndex("OrderOUTId");

                    b.ToTable("Bonusses");
                });

            modelBuilder.Entity("MTCmodel.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameAdditional")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            DiscountPercentage = 0.0,
                            FirstName = "Super",
                            IsActive = true,
                            LastName = "User"
                        },
                        new
                        {
                            Id = "e08d7ef7-2615-4385-844f-81834bb6e776",
                            DiscountPercentage = 0.0,
                            FirstName = "testClientvoornaam",
                            IsActive = true,
                            LastName = "testclientAchternaam",
                            NameAdditional = "tst"
                        });
                });

            modelBuilder.Entity("MTCmodel.OrderIN", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("OrderINs");
                });

            modelBuilder.Entity("MTCmodel.OrderLineIN", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderINID")
                        .HasColumnType("int");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("OrderINID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderLineINs");
                });

            modelBuilder.Entity("MTCmodel.OrderLineOUT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderOUTId")
                        .HasColumnType("int");

                    b.Property<string>("ProductEAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransporterId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderOUTId");

                    b.HasIndex("ProductEAN");

                    b.HasIndex("TransporterId");

                    b.ToTable("OrderLineOUTs");
                });

            modelBuilder.Entity("MTCmodel.OrderOUT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountClientPercentage")
                        .HasColumnType("float");

                    b.Property<int>("HouseNumber")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("HouseNumberAdditional")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("OrderOUTs");
                });

            modelBuilder.Entity("MTCmodel.Product", b =>
                {
                    b.Property<string>("EAN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<double>("BTWPercentage")
                        .HasColumnType("float");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int>("CountInStock")
                        .HasColumnType("int");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxStock")
                        .HasColumnType("int");

                    b.Property<int>("MinStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("RecommendedUnitPrice")
                        .HasColumnType("float");

                    b.Property<double?>("SolderPrice")
                        .HasColumnType("float");

                    b.HasKey("EAN");

                    b.HasIndex("CategorieId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MTCmodel.ProductCategorie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentCategorieID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentCategorieID", "Name")
                        .IsUnique()
                        .HasFilter("[ParentCategorieID] IS NOT NULL");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("MTCmodel.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductEAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ProductEAN");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MTCmodel.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductEAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductEAN");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("MTCmodel.ReturnedProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NewOrderLineOUTID")
                        .HasColumnType("int");

                    b.Property<int>("OrderLineOUTID")
                        .HasColumnType("int");

                    b.Property<bool>("Outlet")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.HasIndex("EAN");

                    b.ToTable("ReturnedProducts");
                });

            modelBuilder.Entity("MTCmodel.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BTW")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyNummer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            BTW = "BE0123456789",
                            CompanyNummer = "0123456789",
                            IsActive = true,
                            Name = "MTCSuperUserSupplier",
                            WebSite = "www.MTCtestsupplier.be"
                        },
                        new
                        {
                            Id = "f0cd17fb-639c-4bd4-aa51-cb64259d9743",
                            BTW = "22222222222222",
                            CompanyNummer = "22222222222",
                            IsActive = true,
                            Name = "TestSupplier",
                            WebSite = "www.MTCtestsupplier.be"
                        });
                });

            modelBuilder.Entity("MTCmodel.TestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestModel");
                });

            modelBuilder.Entity("MTCmodel.Transporter", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            Name = "MTCSuperUserTransporter"
                        },
                        new
                        {
                            Id = "a0392e57-a71c-4314-b87c-ba8dc7628fcc",
                            Name = "TestTransporter"
                        });
                });

            modelBuilder.Entity("MTCmodel.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TransporterID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TransporterID");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "c6aaef1a-8312-4185-8b51-1e3a09421ff7"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "6ee9e763-1f51-4d0d-a463-b7a8a791234b"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "7e19e371-55db-4c16-b9c0-4103de5b39fd"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "1dde702e-2587-41bd-bec5-0f4cc5d05498"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "277f86fd-db6a-449a-a7de-25917a177a61"
                        },
                        new
                        {
                            UserId = "e08d7ef7-2615-4385-844f-81834bb6e776",
                            RoleId = "7e19e371-55db-4c16-b9c0-4103de5b39fd"
                        },
                        new
                        {
                            UserId = "a0392e57-a71c-4314-b87c-ba8dc7628fcc",
                            RoleId = "1dde702e-2587-41bd-bec5-0f4cc5d05498"
                        },
                        new
                        {
                            UserId = "f0cd17fb-639c-4bd4-aa51-cb64259d9743",
                            RoleId = "277f86fd-db6a-449a-a7de-25917a177a61"
                        },
                        new
                        {
                            UserId = "3ba08e02-85b4-4488-8108-e526aa987eed",
                            RoleId = "6ee9e763-1f51-4d0d-a463-b7a8a791234b"
                        },
                        new
                        {
                            UserId = "c6bbcf91-ab26-4bf1-a8ac-6251444d1464",
                            RoleId = "c6aaef1a-8312-4185-8b51-1e3a09421ff7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProductSupplier", b =>
                {
                    b.Property<string>("ProductsEAN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SuppliersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductsEAN", "SuppliersId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("ProductSupplier");
                });

            modelBuilder.Entity("MTCmodel.Address", b =>
                {
                    b.HasOne("MTCmodel.ApplicationUser", "ApplicationUser")
                        .WithMany("Addresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MTCmodel.ApplicationUser", b =>
                {
                    b.HasOne("MTCmodel.Client", "Client")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("MTCmodel.ApplicationUser", "ClientId");

                    b.HasOne("MTCmodel.Supplier", "Supplier")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("MTCmodel.ApplicationUser", "SupplierId");

                    b.HasOne("MTCmodel.Transporter", "Transporter")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("MTCmodel.ApplicationUser", "TransporterId");

                    b.Navigation("Client");

                    b.Navigation("Supplier");

                    b.Navigation("Transporter");
                });

            modelBuilder.Entity("MTCmodel.Bonus", b =>
                {
                    b.HasOne("MTCmodel.Client", "Client")
                        .WithMany("Bonuses")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTCmodel.OrderOUT", "OrderOUT")
                        .WithMany("Bonusses")
                        .HasForeignKey("OrderOUTId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("OrderOUT");
                });

            modelBuilder.Entity("MTCmodel.OrderIN", b =>
                {
                    b.HasOne("MTCmodel.Supplier", "Supplier")
                        .WithMany("OrdersINs")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MTCmodel.OrderLineIN", b =>
                {
                    b.HasOne("MTCmodel.OrderIN", "OrderIN")
                        .WithMany("OrderLinesINs")
                        .HasForeignKey("OrderINID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTCmodel.Product", "Product")
                        .WithMany("OrderLineINs")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrderIN");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MTCmodel.OrderLineOUT", b =>
                {
                    b.HasOne("MTCmodel.OrderOUT", "OrderOUT")
                        .WithMany("OrderLineOUTs")
                        .HasForeignKey("OrderOUTId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTCmodel.Product", "Product")
                        .WithMany("OrderLineOUTs")
                        .HasForeignKey("ProductEAN")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTCmodel.Transporter", "Transporter")
                        .WithMany("orderLineOUTs")
                        .HasForeignKey("TransporterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrderOUT");

                    b.Navigation("Product");

                    b.Navigation("Transporter");
                });

            modelBuilder.Entity("MTCmodel.OrderOUT", b =>
                {
                    b.HasOne("MTCmodel.Client", "Client")
                        .WithMany("OrderOUTs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MTCmodel.Product", b =>
                {
                    b.HasOne("MTCmodel.ProductCategorie", "Categorie")
                        .WithMany("Products")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("MTCmodel.ProductCategorie", b =>
                {
                    b.HasOne("MTCmodel.ProductCategorie", "ParentCategorie")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategorieID");

                    b.Navigation("ParentCategorie");
                });

            modelBuilder.Entity("MTCmodel.ProductImage", b =>
                {
                    b.HasOne("MTCmodel.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductEAN")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MTCmodel.ProductReview", b =>
                {
                    b.HasOne("MTCmodel.Client", "Client")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTCmodel.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductEAN")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MTCmodel.ReturnedProduct", b =>
                {
                    b.HasOne("MTCmodel.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTCmodel.Product", "Product")
                        .WithMany("ReturnedProducts")
                        .HasForeignKey("EAN")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MTCmodel.Zone", b =>
                {
                    b.HasOne("MTCmodel.Transporter", "Transporter")
                        .WithMany("Zones")
                        .HasForeignKey("TransporterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transporter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MTCmodel.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MTCmodel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MTCmodel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MTCmodel.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTCmodel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MTCmodel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSupplier", b =>
                {
                    b.HasOne("MTCmodel.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsEAN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTCmodel.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTCmodel.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MTCmodel.Client", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("Bonuses");

                    b.Navigation("OrderOUTs");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("MTCmodel.OrderIN", b =>
                {
                    b.Navigation("OrderLinesINs");
                });

            modelBuilder.Entity("MTCmodel.OrderOUT", b =>
                {
                    b.Navigation("Bonusses");

                    b.Navigation("OrderLineOUTs");
                });

            modelBuilder.Entity("MTCmodel.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderLineINs");

                    b.Navigation("OrderLineOUTs");

                    b.Navigation("ProductReviews");

                    b.Navigation("ReturnedProducts");
                });

            modelBuilder.Entity("MTCmodel.ProductCategorie", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("MTCmodel.Supplier", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("OrdersINs");
                });

            modelBuilder.Entity("MTCmodel.Transporter", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("orderLineOUTs");

                    b.Navigation("Zones");
                });
#pragma warning restore 612, 618
        }
    }
}
